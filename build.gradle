buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'maven'
    id 'com.github.hierynomus.license' version '0.13.1'
}

group 'net.netzgut.integral'
version '0.0.2'
description 'A ReastEasy 3.6.3 replacement for org.tynamo.tapestry-resteasy'

project.ext.inceptionYear = '2016'
project.ext.github = 'integral-resteasy'
project.ext.moduleClasses = 'net.netzgut.integral.resteasy.modules.ResteasyModule'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
}

project.ext.versions = [
    // compile
    slf4j: '1.7.24',
    resteasy: '3.6.3.Final',

    // provided
    tapestry: '5.4.3',
    servlet: '3.1.0'
]


dependencies {

    compile "org.slf4j:slf4j-log4j12:${versions.slf4j}"

    compile("org.jboss.resteasy:resteasy-jaxrs:${versions.resteasy}") {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
    compile "org.jboss.resteasy:resteasy-jaxb-provider:${versions.resteasy}"

    compileOnly "org.apache.tapestry:tapestry-core:${versions.tapestry}"
    compileOnly "javax.servlet:javax.servlet-api:${versions.servlet}"
}

jar {
    manifest { attributes 'Tapestry-Module-Classes': moduleClasses }
}

task wrapper(type: Wrapper) { gradleVersion = '4.6' }

task pom {
    doLast {
        pom {
            packaging = 'jar'
            project {
                inceptionYear inceptionYear
                name rootProject.name
                description project.description
                url "https://github.com/netzgut/$github"
                properties { 'project.build.sourceEncoding' 'UTF-8' }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                scm {
                    url "https://github.com/netzgut/$github"
                    connection "scm:git:git://github.com/netzgut/${github}.git"
                    developerConnection "scm:git:git@github.com:netzgut/${github}.git"
                }
            }
        }.withXml { xmlProvider ->
            // We need to add the compileOnly dependencies manually, maven-plugin isn't supporting it.
            project.configurations.compileOnly.allDependencies.each { dep ->
                asNode().dependencies[0].appendNode('dependency').with {
                    it.appendNode('groupId', dep.group)
                    it.appendNode('artifactId', dep.name)
                    it.appendNode('version', dep.version)
                    it.appendNode('scope', 'provided')
                }
            }
            
            // Sort the dependencies so the order wont change with every ionvocation
            def dependenciesNodeList = node.get('dependencies')
            if (dependenciesNodeList) {
                def dependenciesNode = dependenciesNodeList.get(0)
                def dependencyNodeList = dependenciesNode.get('dependency')
                def sorted = dependencyNodeList.sort { a, b ->
                    def r = a.get('groupId').text().trim().compareTo(b.get('groupId').text().trim())
                    if (r != 0) return r
                    return a.get('artifactId').text().trim().compareTo(b.get('artifactId').text().trim())
                }
                dependenciesNode.children().removeAll(dependenciesNode.children())
                sorted.each { dependenciesNode.append(it) }
            }
            
            def plugins = xmlProvider.asNode().appendNode('build').appendNode('plugins')
            def mavenCompilerPlugin = plugins.appendNode('plugin')
            mavenCompilerPlugin.appendNode('artifactId').value = 'maven-compiler-plugin'
            mavenCompilerPlugin.appendNode('version').value = '3.5.1'
            def mavenCompilerPluginConfiguration = mavenCompilerPlugin.appendNode('configuration')
            mavenCompilerPluginConfiguration.appendNode('source').value = sourceCompatibility
            mavenCompilerPluginConfiguration.appendNode('target').value = targetCompatibility

            def mavenSurefirePlugin = plugins.appendNode('plugin')
            mavenSurefirePlugin.appendNode('artifactId').value = 'maven-surfire-plugin'
            mavenSurefirePlugin.appendNode('version').value = '2.19.1'
            mavenSurefirePlugin.appendNode('configuration')

            def mavenJarPlugin = plugins.appendNode('plugin')
            mavenJarPlugin.appendNode('artifactId').value = 'maven-jar-plugin'
            def mavenJarPluginConfigurationManifest = mavenJarPlugin.appendNode('configuration').appendNode('archive').appendNode('manifestEntries')
            mavenJarPluginConfigurationManifest.appendNode('Tapestry-Module-Classes').value = moduleClasses
        }.writeTo('pom.xml')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
	archives sourcesJar
}

uploadArchives {
    // We need to set the variables if not present
    ext.snapshot_repository = project.hasProperty('snapshot-repository') ? project.property('snapshot-repository') : ''
    ext.snapshot_repository_username = project.hasProperty('snapshot-repository-username') ? project.property('snapshot-repository-username') : ''
    ext.snapshot_repository_password = project.hasProperty('snapshot-repository-password') ? project.property('snapshot-repository-password') : ''

    ext.release_repository = project.hasProperty('release-repository') ? project.property('release-repository') : ''
    ext.release_repository_username = project.hasProperty('release-repository-username') ? project.property('release-repository-username') : ''
    ext.release_repository_password = project.hasProperty('release-repository-password') ? project.property('release-repository-password') : ''

    repositories {
        mavenDeployer {
            snapshotRepository(url: snapshot_repository) {
                authentication(userName: snapshot_repository_username, password: snapshot_repository_password)
            }
            repository(url: release_repository) {
                authentication(userName: release_repository_username, password: release_repository_password)
            }
        }
    }
}


license {
    header rootProject.file('src/main/resources/META-INF/LICENSE.txt')
    strictCheck true
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
}
